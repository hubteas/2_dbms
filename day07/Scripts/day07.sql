-- 관계를 맺은 테이블의 DML
SELECT * FROM TBL_PHONE;
SELECT * FROM TBL_CASE;

-- UPDATE
UPDATE TBL_PHONE 
SET PHONE_SERIAL_NUMBER = 'S23-444'
WHERE PHONE_SERIAL_NUMBER = 'S23-001';
-- 자식에서 참조하고 있는 PK 값의 수정은 기본적으로 막혀있다.
-- 일반적으로 부모테이블의 PK를 수정하는것은 권장하지 않는다.
-- 그 이유는 일관성을 손상시키고, 무결성에 위배될 수 있기 때문이다.
-- 하지만, 필요에 따라서 수정해야 할 때도 있기 때문에, 아래의 방법을 사용한다.

-- 1.
-- 참조중인 값을 NULL 로 변경 후 수정
UPDATE TBL_CASE 
SET PHONE_SERIAL_NUMBER = NULL
WHERE PHONE_SERIAL_NUMBER = 'S23-001';
-- 자식 테이블의 FK 중, 수정하려는 부모 테이블의 값인 친구들을 NULL 로 바꿔준다.(임시)

UPDATE TBL_PHONE 
SET PHONE_SERIAL_NUMBER = 'S23-444'
WHERE PHONE_SERIAL_NUMBER = 'S23-001';

UPDATE TBL_CASE 
SET PHONE_SERIAL_NUMBER = 'S23-444'
WHERE PHONE_SERIAL_NUMBER IS NULL;


--=====================================
-- 2. 
-- 부모에 임의의 값을 INSERT 하고
-- 자식 FK 를 수정한 후에 진행한다.
INSERT INTO HR.TBL_PHONE
(PHONE_SERIAL_NUMBER, PHONE_COLOR, PHONE_SIZE, PHONE_PRICE, PHONE_PRODUCTION_DATE, PHONE_SALE)
VALUES('111', '', 0, 0, '', 0);

UPDATE TBL_CASE 
SET PHONE_SERIAL_NUMBER = '111'
WHERE PHONE_SERIAL_NUMBER = 'S23-002';

UPDATE TBL_PHONE
SET PHONE_SERIAL_NUMBER = 'S23-222'
WHERE PHONE_SERIAL_NUMBER = 'S23-002';

UPDATE TBL_CASE
SET PHONE_SERIAL_NUMBER = 'S23-222'
WHERE PHONE_SERIAL_NUMBER = '111';

DELETE FROM TBL_PHONE
WHERE PHONE_SERIAL_NUMBER = '111';

SELECT * FROM TBL_PHONE;

-- [실습]
/*
   TBL_MEMBER, TBL_BOOK 활용!
   
   회원 정보 추가 (3개 이상)
   책 정보 추가 (3개 이상)
   회원 이름 수정
   책 대여 하기
   책 대여한 회원 번호 수정
   회원 삭제
   
 */
SELECT * FROM TBL_MEMBER;

INSERT INTO HR.TBL_MEMBER
(MEMBER_ID, MEMBER_NAME, MEMBER_AGE, MEMBER_PHONE, MEMBER_ADDRESS)
VALUES(111, '김철수', 22, '010-1111-1111', '서울');

INSERT INTO HR.TBL_MEMBER
(MEMBER_ID, MEMBER_NAME, MEMBER_AGE, MEMBER_PHONE, MEMBER_ADDRESS)
VALUES(222, '김영희', 22, '010-1111-1112', '부산');

INSERT INTO HR.TBL_MEMBER
(MEMBER_ID, MEMBER_NAME, MEMBER_AGE, MEMBER_PHONE, MEMBER_ADDRESS)
VALUES(333, '김성수', 22, '010-1111-1113', '전주');


INSERT INTO HR.TBL_BOOK
(BOOK_ID, BOOK_NAME, BOOK_GENRE, MEMBER_ID)
VALUES(1, '일권', '인문학', 111);

INSERT INTO HR.TBL_BOOK
(BOOK_ID, BOOK_NAME, BOOK_GENRE, MEMBER_ID)
VALUES(2, '이권', '추리', 222);

INSERT INTO HR.TBL_BOOK
(BOOK_ID, BOOK_NAME, BOOK_GENRE, MEMBER_ID)
VALUES(3, '삼권', 'IT', 333);

SELECT * FROM TBL_BOOK;
SELECT * FROM TBL_MEMBER;

UPDATE TBL_MEMBER 
SET MEMBER_NAME = '김영수'
WHERE MEMBER_ID = '111';

--책대여
UPDATE TBL_BOOK
SET MEMBER_ID = 111
WHERE BOOK_ID = 3;

-- 책 대여한 회원 번호 수정
UPDATE TBL_BOOK 
SET MEMBER_ID = NULL
WHERE MEMBER_ID = 222;

UPDATE TBL_MEMBER 
SET MEMBER_ID = 2
WHERE MEMBER_ID = 222;

UPDATE TBL_BOOK 
SET MEMBER_ID = 2
WHERE MEMBER_ID = NULL;


--회원 정보 추가 (3개 이상) 선생님 버전
INSERT INTO TBL_MEMBER
VALUES(1, '류호근', 22, '010-1111-1222', '수원시 장안구');

INSERT INTO TBL_MEMBER
VALUES(2, '홍길동', 23, '010-2222-2222', '수원시 장안구');

INSERT INTO TBL_MEMBER
VALUES(3, '강감찬', 25, '010-3333-3333', '수원시 장안구');

--   책 정보 추가 (3개 이상)
INSERT INTO HR.TBL_BOOK
(BOOK_ID, BOOK_NAME, BOOK_GENRE)
VALUES(101, '셜록 홈즈', '추리');

INSERT INTO TBL_BOOK
(BOOK_ID, BOOK_NAME, BOOK_GENRE)
VALUES(102, 'DBMS 완전 정복', 'IT');

INSERT INTO TBL_BOOK
(BOOK_ID, BOOK_NAME, BOOK_GENRE)
VALUES(103, '그리고 아무도 없었다', '추리');

--   회원 이름 수정
UPDATE TBL_MEMBER 
SET MEMBER_NAME = '스펀지밥'
WHERE MEMBER_ID = 1;

--   책 대여 하기
UPDATE TBL_BOOK 
SET MEMBER_ID = 1
WHERE BOOK_ID = 101;

UPDATE TBL_BOOK 
SET MEMBER_ID = 1
WHERE BOOK_ID = 102;

UPDATE TBL_BOOK 
SET MEMBER_ID = 3
WHERE BOOK_ID = 103;

--   책 대여한 회원 번호 수정
UPDATE TBL_BOOK 
SET MEMBER_ID = NULL
WHERE MEMBER_ID = 1;

UPDATE TBL_MEMBER
SET   MEMBER_ID = 49
WHERE MEMBER_ID = 1;

UPDATE TBL_BOOK 
SET MEMBER_ID = 49
WHERE MEMBER_ID IS NULL;

--   회원 삭제
UPDATE TBL_BOOK 
SET MEMBER_ID = NULL
WHERE MEMBER_ID = 49;

DELETE FROM TBL_MEMBER
WHERE MEMBER_ID = 49;

SELECT * FROM TBL_MEMBER;
SELECT * FROM TBL_BOOK;

--==========================================================
/*
 시퀀스(Sequence)
 	오라클에서 중복되지 않는 값을 자동으로 순차적으로 생성하는것
 	보통 PK값에 중복값을 방지하기 위해 사용한다.
 
 시퀀스 생성
 	- CREATE SEQUENCE 시퀀스명;
 	- 여러 옵션이 있다.
 		START WITH 시작 숫자
 		INCREMENT BY 증감숫자
 등등..
 */
--============================================================
--SEQUENCE
-- 회원과 책 정보를 INSERT 할때
-- PK를 직접 지정하는 것이 아닌, 시퀀스로 받아올것임

TRUNCATE TABLE TBL_BOOK;
DELETE FROM TBL_MEMBER;
SELECT * FROM TBL_BOOK;
SELECT * FROM TBL_MEMBER;
--시퀀스 생성
CREATE SEQUENCE SEQ_BOOK;
CREATE SEQUENCE SEQ_MEMBER;

-- 시퀀스를 이용해서 데이터 넣기
INSERT INTO TBL_MEMBER
VALUES(SEQ_MEMBER.NEXTVAL, '류호근', 22, '010-1111-1222', '수원시 장안구');

INSERT INTO TBL_MEMBER
VALUES(SEQ_MEMBER.NEXTVAL, '홍길동', 23, '010-2222-2222', '수원시 장안구');

INSERT INTO TBL_MEMBER
VALUES(SEQ_MEMBER.NEXTVAL, '강감찬', 25, '010-3333-3333', '수원시 장안구');


SELECT SEQ_MEMBER.NEXTVAL
FROM DUAL;
--   책 정보 추가 (3개 이상)
INSERT INTO HR.TBL_BOOK
(BOOK_ID, BOOK_NAME, BOOK_GENRE)
VALUES(SEQ_BOOK.NEXTVAL, '셜록 홈즈', '추리');

INSERT INTO TBL_BOOK
(BOOK_ID, BOOK_NAME, BOOK_GENRE)
VALUES(SEQ_BOOK.NEXTVAL, 'DBMS 완전 정복', 'IT');

INSERT INTO TBL_BOOK
(BOOK_ID, BOOK_NAME, BOOK_GENRE)
VALUES(SEQ_BOOK.NEXTVAL, '그리고 아무도 없었다', '추리');

UPDATE  TBL_BOOK
SET MEMBER_ID = 1
WHERE BOOK_ID =1;

UPDATE  TBL_BOOK
SET MEMBER_ID = 2
WHERE BOOK_ID =2;

UPDATE  TBL_BOOK
SET MEMBER_ID = 3
WHERE BOOK_ID =3;

SELECT * FROM TBL_BOOK;

--자식에서 참조하고 있기 때문에 삭제 불가능!
DELETE FROM TBL_MEMBER
WHERE MEMBER_ID = 1;

--1. 자식에서 해당FK값을 NULL로 수정!

--2. 자동으로 부모 PK가 삭제되면 자식에서 해당PK값을 참조하고 있던 행도 함께 삭제
-- FK 제약조건 뒤에 ON DELETE CASCADE 옵션을 추가함으로써 구현!

ALTER TABLE TBL_BOOK DROP CONSTRAINT FK_BOOK;

SELECT * FROM TBL_BOOK;


ALTER TABLE TBL_BOOK
ADD CONSTRAINT FK_BOOK FOREIGN KEY(MEMBER_ID)
REFERENCES TBL_MEMBER(MEMBER_ID) ON DELETE CASCADE;

SELECT * FROM TBL_BOOK;

--===========================================================================
/*
NULL
	- 정의되지 않은 값
	- 빈 값대신, 미정 값을 부여할 때 사용
	- PK는 불가능, FK가능
*/
-- 이미 만들어진 테이블에 NOT NULL 추가 및 삭제
ALTER TABLE TBL_CAR MODIFY CAR_NAME NOT NULL;
ALTER TABLE TBL_CAR MODIFY CAR_NAME NULL;

--NVL

SELECT * FROM TBL_BOOK;
SELECT * FROM TBL_MEMBER;
INSERT INTO HR.TBL_BOOK
(BOOK_ID, BOOK_NAME, BOOK_GENRE)
VALUES(SEQ_BOOK.NEXTVAL, '셜록 홈즈', '추리');

INSERT INTO TBL_BOOK
(BOOK_ID, BOOK_NAME, BOOK_GENRE)
VALUES(SEQ_BOOK.NEXTVAL, 'DBMS 완전 정복', 'IT');

INSERT INTO TBL_BOOK
(BOOK_ID, BOOK_NAME, BOOK_GENRE)
VALUES(SEQ_BOOK.NEXTVAL, '그리고 아무도 없었다', '추리');

-- SELECT 는 테이블에 있는 데이터를 가지고 가상의 테이블을 만드는 것이다.
SELECT BOOK_ID, BOOK_NAME, BOOK_GENRE, NVL(MEMBER_ID, -1) 
FROM TBL_BOOK;

SELECT BOOK_ID, BOOK_NAME, BOOK_GENRE, NVL2(MEMBER_ID,'대여중' ,'대여 가능') 
FROM TBL_BOOK;
	